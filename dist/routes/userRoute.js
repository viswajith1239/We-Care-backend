"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const userRepository_1 = require("../repositories/user/userRepository");
const userService_1 = require("../service/user/userService");
const userController_1 = require("../controllers/user/userController");
// import authMiddleware from "../middlewares/authmiddleware";
const multer_1 = __importDefault(require("../utils/multer"));
const JwtConfig_1 = require("../config/JwtConfig");
const router = (0, express_1.Router)();
const AuthRepositoryInstance = new userRepository_1.AuthRepository();
const AuthServiceInstance = new userService_1.AuthService(AuthRepositoryInstance);
const AuthControllerInstance = new userController_1.AuthController(AuthServiceInstance);
router.post('/signUp', AuthControllerInstance.createUser.bind(AuthControllerInstance));
router.post('/verifyotp', AuthControllerInstance.verifyOtp.bind(AuthControllerInstance));
router.post('/resend-otp', AuthControllerInstance.resendOtp.bind(AuthControllerInstance));
router.post('/login', AuthControllerInstance.login.bind(AuthControllerInstance));
router.post("/forgototp", AuthControllerInstance.verifyForgotOtp.bind(AuthControllerInstance));
router.post('/googlesignup', AuthControllerInstance.googleSignUpUser.bind(AuthControllerInstance));
router.post("/forgotpassword", AuthControllerInstance.forgotPassword.bind(AuthControllerInstance));
router.post("/resetpassword", AuthControllerInstance.resetPassword.bind(AuthControllerInstance));
router.get("/specializations", (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.fetchAllSpecializations.bind(AuthControllerInstance));
router.get("/doctors", (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.getAllDoctors.bind(AuthControllerInstance));
router.get("/doctors/:doctorId", (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.getDoctor.bind(AuthControllerInstance));
router.get("/status", AuthControllerInstance.getUserStatus.bind(AuthControllerInstance));
router.get("/schedules", (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.getAppoinmentSchedules.bind(AuthControllerInstance));
router.post("/payment/:appoinmentId", (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.checkoutPayment.bind(AuthControllerInstance));
router.post("/bookings", (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.createBooking.bind(AuthControllerInstance));
router.get('/users/:userId', (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.getUser.bind(AuthControllerInstance));
router.get('/users', (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.getAllUsers.bind(AuthControllerInstance));
router.patch('/update-user', (0, JwtConfig_1.verifyToken)('user'), multer_1.default.single('profileImage'), AuthControllerInstance.updateUserData.bind(AuthControllerInstance));
router.get('/bookings-details/:user_id', (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.getAllBookings.bind(AuthControllerInstance));
router.post("/cancel-appoinment", (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.cancelAppoinment.bind(AuthControllerInstance));
router.get("/fetchdoctors/:userId", (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.getBookedDoctor.bind(AuthControllerInstance));
router.patch('/reset-password/:user_id', (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.resetPasswords.bind(AuthControllerInstance));
router.get('/prescription/download/:prescriptionId/:userId', AuthControllerInstance.downloadPrescriptionPDF.bind(AuthControllerInstance));
router.get('/prescription/:user_id', (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.getPrescription.bind(AuthControllerInstance));
router.get('/bookings/:user_id/:doctor_id', (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.findBookings.bind(AuthControllerInstance));
router.post('/review', (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.addReview.bind(AuthControllerInstance));
router.get('/reviews/:doctor_id', (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.getReivew.bind(AuthControllerInstance));
router.patch('/edit-review', (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.editReview.bind(AuthControllerInstance));
router.get('/reviews-summary/:doctor_id', (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.getReivewSummary.bind(AuthControllerInstance));
router.get('/notifications/:user_id', (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.getNotifications.bind(AuthControllerInstance));
router.delete('/clear-notifications/:user_id', (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.clearNotifications.bind(AuthControllerInstance));
router.post('/add-reports', (0, JwtConfig_1.verifyToken)('user'), multer_1.default.single('image'), AuthControllerInstance.addReport.bind(AuthControllerInstance));
router.get('/wallet-data/:user_id', (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.getWalletData.bind(AuthControllerInstance));
router.get('/reports/:userId', (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.getReports.bind(AuthControllerInstance));
router.post('/contact/:userId', (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.contact.bind(AuthControllerInstance));
router.post("/logout", (0, JwtConfig_1.verifyToken)('user'), AuthControllerInstance.logout.bind(AuthControllerInstance));
exports.default = router;
